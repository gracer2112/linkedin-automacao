#.env
#Configuração da aplicação
LINKEDIN_EMAIL=ericaaraujo2112@gmail.com
LINKEDIN_PASSWORD=Afterimage@1
GEMINI_API_KEY=AIzaSyAmwVQwolEQuqTeHalYqNBrKZLloO9xP4s
CONFIG_JSON_PATH=configs/linkedin.json
VERTEX_PROJECT=n8n-automatizando-ia-424719
VERTEX_REGION=us-central1
GOOGLE_APPLICATION_CREDENTIALS=/data/linkedin-automacao/application_default_credentials.json
                                                       
#Configuração de ambiente para o n8n
# Domínio e Subdomínio
SUBDOMAIN=rpastreamline
DOMAIN_NAME=servebeer.com
#task runners
N8N_RUNNERS_ENABLED=true
# Fuso Horário
GENERIC_TIMEZONE=America/Sao_Paulo
# Pasta de dados no host
DATA_FOLDER=/home/gracer2112/projetos/linkedin-automacao/.n8n
#usuario
UID=1002
GID=1002

#docker-compose.yml
#version: '3.8'
services:
  n8n:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: linkedin-automacao-n8n-app
    restart: always
    user: "${UID}:${GID}" # UID e GID virão do .env

    working_dir: /data/linkedin-automacao # Sem sub-itens, apenas a string do path

    ports:
      - "5678:5678"

    environment: # Todas as variáveis de ambiente devem estar listadas aqui, com um hífen e a mesma indentação
      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - N8N_USER_FOLDER=/home/node/.n8n
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_RUNNERS_ENABLED=true # <--- CORRIGIDO: Removida a duplicação e indentação
      - N8N_EXPRESS_TRUST_PROXY=true # Corrigido de PROX # <--- CORRIGIDO: Removida a duplicação e indentação
      - N8N_EXECUTE_COMMAND_MAX_BUFFER_SIZE=10485760
      - LINKEDIN_EMAIL=${LINKEDIN_EMAIL}
      - LINKEDIN_PASSWORD=${LINKEDIN_PASSWORD}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - CONFIG_JSON_PATH=${CONFIG_JSON_PATH}
      - VERTEX_PROJECT=${VERTEX_PROJECT}
      - VERTEX_REGION=${VERTEX_REGION}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}

    volumes: # Todas as montagens de volume devem estar listadas aqui, com um hífen e a mesma indentação
      - ${DATA_FOLDER}:/home/node/.n8n
      - .:/data/linkedin-automacao

    tty: true
    stdin_open: true


# dockerfile
FROM n8nio/n8n:latest

# Define o diretório de trabalho principal dentro do container para sua aplicação
# É uma boa prática usar /app ou /usr/src/app para o código da sua aplicação.
# No seu caso, o volume mount vai para /data/linkedin-automacao, então usaremos esse caminho.
WORKDIR /data/linkedin-automacao

# Instala Python e pip
USER root
RUN apk update && \
    apk add --no-cache python3 py3-pip libreoffice openjdk11 bash tree && \
    rm -rf /var/cache/apk/* 

# Garante que /bin/sh (o shell padrão no Alpine) exista e aponte para /bin/bash
# Isso é útil se algum script interno da imagem base esperar /bin/sh
RUN ln -sf /bin/bash /bin/sh

# Cria virtualenv isolado para dependências Python
RUN python3 -m venv ./venv

# Dá permissão de leitura (e execução) ao venv para o usuário node
RUN chown -R node:node ./venv
RUN chown -R 1002:1002 ./venv

# Copia o requirements.txt para dentro do container
COPY requirements.txt .

# Use o pip do venv diretamente
RUN ./venv/bin/pip install --upgrade pip && \
    ./venv/bin/pip install --break-system-packages -r requirements.txt

# Criação do user1002 e home
RUN addgroup -g 1002 user1002 && \
    adduser -D -u 1002 -G user1002 -h /data/linkedin-automacao/tmp_home_1002 user1002

RUN mkdir -p /data/linkedin-automacao/tmp_home_1002 && \
    chown -R user1002:user1002 /data/linkedin-automacao/tmp_home_1002

# Supondo que você crie o diretório de alguma forma
RUN mkdir -p /data/linkedin-automacao/output
RUN chown -R node:node /data/linkedin-automacao/output && \
    chown -R user1002:user1002 /data/linkedin-automacao/output

ENV HOME=/data/linkedin-automacao/tmp_home_1002

# Retorne o usuário padrão do n8n para segurança
USER user1002
#USER node

# Comando padrão para quando o container é iniciado (pode ser sobrescrito pelo docker-compose)
# Isso permite que você entre no shell para inspecionar
#CMD ["bash"]

# (Opcional: Copie scripts python para dentro do container, se quiser)
# COPY ./meus-scripts/ /data/meus-scripts/

# (Opcional) Exemplo de cmd para rodar scripts python:
# CMD ["/data/venv/bin/python", "/data/meus-scripts/seuscript.py"]